# Test of the history functions.  Some of these are already tested in
# variables and commands.


#AT_SETUP([history])
#...

#AT_SETUP([history performance])
#...

AT_SETUP([history hup])

# Test for problem introduced in 6.15 where the history file gets
# truncated if a tcsh is run from a pty that is closed unexpectedly.
# Test this three ways, depending on availability of local programs to
# create pseudo-ttys (pty).

AT_DATA([hist-kill.sh],
[[#!/bin/sh

program=script
[ $# -eq 0 ] || program=$1
progpath=$(which $program)
[ -n "$progpath" -a -x "$progpath" ] || {
    echo $program was not found; exit 0
}
echo Using $program "($progpath)" to run tcsh inside a pty

set -e

saveHistfile=                           # unneeded for test.history
histfile=$PWD/test.history
# Initialize the history file to something small but non-zero.
{ echo "#+1234567890"; echo echo dummy history; } > $histfile

setHistSize() {
    histsize=$(ls -l $histfile | cut -f 5)
    [ $histsize -gt 0 ] || exit 3       # should never happen
    histdate=$(ls -l $histfile | cut -f 6,7,8)
    ls -l --full-time $histfile
    echo size is $histsize date is $histdate at $(date)
}

checkHistSize () {
    local oldS=$1
    local oldD=$2
    local newHistsize=$(ls -l $histfile | cut -f 5)
    local newHistdate=$(ls -l $histfile | cut -f 6,7,8)
    ls -l --full-time $histfile
    echo size is now $newHistsize date is now $newHistdate at $(date)
    # if the size not zero while the date and size are not both unchanged then
    # the test is successful
    [ $newHistsize -gt 0 -a \
      \( $oldS -ne $newHistsize -o $oldD -ne $newHistdate \) ] || \
        { echo check hist size/date failed; return 66; }
}

tcshPath=$(which tcsh)
[ -x $tcshPath ] || exit 1
tcshInput=hist-kill.csh
[ -e $tcshInput ] || exit 2

if [ $program = script ]; then
    # use script to create the pty
    ( echo 'set histfile='$histfile; cat $tcshInput ; sleep 2; echo exit ) | \
        script -c "exec $tcshPath" /dev/null & scriptPid=$!
    sleep 1
    setHistSize
    # Not sure if there is a more standard way to do this.
    childScript=$(ps --pppid $scriptPid --no-headers --format pid)
    [ -n $childScript -a $childScript -gt 1 ] && kill $childScript
elif [ $program = xterm ]; then
    # use xterm to create the pty
    # Can't override the default history file, so this test trashes user's real
    # history file.  Try to preserve it.
    saveHistfile=$PWD/save.history
    newHistfile=$HOME/.history
    mv $newHistfile $saveHistfile
    mv $histfile $newHistfile           # initialize contents created above
    histfile=$newHistfile
    xterm -iconic -geom -1+1 -e "$tcshPath" & xtermPid=$!
    sleep 1
    setHistSize
    kill $xtermPid
elif [ $program = ./hist-kill ]; then
    # use custom C program to create the pty
    ( echo 'set histfile='$histfile; cat $tcshInput ) | \
        ./hist-kill $tcshPath & histkillPid=$!
    sleep 1
    setHistSize
    kill $histkillPid
else
    echo unsupported program $program
fi
sleep 1
checkHistSize $histsize $histdate || rc=$?
# Restore original history file, if necessary
[ -n "$saveHistfile" ] && mv $saveHistfile $histfile
[ -z "$rc" ] || exit $rc
echo Done testing tcsh with $program successfully
]])

AT_DATA([hist-kill.csh],
[[set history = ( 20 "%h %D-%w-%y %P %R\n" )
set savehist=(20 merge)
history -S
echo $version pid=$$
/bin/ls -l --full-time ~/.hi* ./*history*
]])

# Try both variants of this script, then the C version.
AT_CHECK([sh hist-kill.sh script], 0, stdout, stderr)
AT_CHECK([sh hist-kill.sh xterm], 0, stdout, stderr)

AT_DATA([hist-kill.c],
[[/* Test tcsh response to loss of pseudo-terminal (pty) master.  Creates a pty
 * and attaches it to a child process, the pty slave.  Sends the contents to
 * stdin to the pty and echos output from the pty onto stdout.  Takes one
 * optional argument, which is the pathname to the program to run attached to
 * the pty.  The main process is the pty master and does not exit, but must be
 * killed by the invoker.  When the master dies, the slave process should
 * receive a SIGHUP courtesy of the kernel. */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pty.h>			/* for openpty and forkpty */
#include <unistd.h>
#include <errno.h>
#include <signal.h>

int main(int argc, char *argv[])
{
    const char *binFile = "/bin/tcsh";
    if (argc > 1)
	binFile = argv[1];
    int masterFd;
    int pid = forkpty(&masterFd, NULL, NULL, NULL);
    if (pid == 0) {			/* child */
	printf("pty slave is %d\n", getpid());
	char *bin = strdup(binFile);
	char *argv[] = { bin, NULL };
	execvp(bin, argv);
	perror("execvp");
	exit(99);
    }
    if (pid < 0) {
	perror("forkpty");
	exit(66);
    }
    { /* parent */
	int nbytes;
	int input = dup(masterFd);
	int output = dup(masterFd);
	close(masterFd);

	printf("pty master is %d\n", getpid());

	if (fork() == 0) {
	    /* subparent, sends data from our stdin to child pty, then sleeps 1
	     * second and kills main process. */

	    unsigned nSent = 0;
	    char buf[128];
	    printf("sub parent is %d\n", getpid());
	    while ((nbytes = read(0, buf, sizeof(buf))) > 0) {
		int sent = write(output, buf, nbytes);
		if (sent > 0)
		    nSent += sent;
		if (sent != nbytes)
		    break;
	    }
	    printf("Sent %d bytes to child.\n", nSent);
	    exit(0);
	}

	/* Main process reads data from the child pty and displays it. */
	unsigned count = 0;
	while (1) {
	    char buf[72];
	    nbytes = read(input, buf, sizeof(buf)-1);
	    if (nbytes < 0)
		break;
	    count += nbytes;
	    unsigned i;
	    for (i = 0; i<nbytes; i++) { /* filter control characters */
		if (buf[i] < 32 &&
		    buf[i] != '\n' && buf[i] != '\r' && buf[i] != '\t') {
		    printf("Bytes: ");
		    for (i = 0; i<nbytes; i++)
			printf(" %02x", buf[i] & 0xff);
		    printf("\n");
		    break;
		}
	    }
	    if (i == nbytes) {		/* no funny business seen */
		buf[nbytes] = 0;
		printf("Got _%s_\n", buf);
	    }
	    fflush(stdout);
	}
	if (nbytes < 0)
	    perror("read");
	usleep(100000);
	printf("exiting, got EOF after %d bytes\n", count);
	exit(0);
    }
}
]])

AT_CHECK([if cc -o hist-kill hist-kill.c -lutil; ] dnl
	 [ then sh hist-kill.sh ./hist-kill; ] dnl
	 [ else echo C compiler failed, skipping this approach; fi],
 	 0, stdout, stderr)

AT_CLEANUP
